<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记忆化搜索]]></title>
    <url>%2Fundefined%2F%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[题目描述对于一个递归函数w(a,b,c)w(a,b,c)如果a \le 0a≤0 or b \le 0b≤0 or c \le 0c≤0就返回值11.如果a&gt;20a&gt;20 or b&gt;20b&gt;20 or c&gt;20c&gt;20就返回w(20,20,20)w(20,20,20) 如果a&lt;ba&lt;b并且b&lt;cb&lt;c 就返回w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c)w(a,b,c−1)+w(a,b−1,c−1)−w(a,b−1,c)其它的情况就返回w(a-1,b,c)+w(a-1,b-1,c)+w(a-1,b,c-1)-w(a-1,b-1,c-1)w(a−1,b,c)+w(a−1,b−1,c)+w(a−1,b,c−1)−w(a−1,b−1,c−1)这是个简单的递归函数，但实现起来可能会有些问题。当a,b,ca,b,c均为15时，调用的次数将非常的多。你要想个办法才行. /* absi2011 : 比如 w(30,-1,0)w(30,−1,0)既满足条件1又满足条件2 这种时候我们就按最上面的条件来算 所以答案为1 */ 输入输出格式输入格式：会有若干行。 并以-1,-1,-1−1,−1,−1结束。 保证输入的数在[-9223372036854775808,9223372036854775807][−9223372036854775808,9223372036854775807]之间，并且是整数。 输出格式：输出若干行，每一行格式： w(a, b, c) = ans 注意空格。 题目思路：打表存 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;using namespace std;const int N=100007;int a,b,c;int ans=0;int w[21][21][21]= &#123;-1&#125;;int dfs(int xa,int xb,int xc) &#123; if(w[xa][xb][xc]!=-1)return w[xa][xb][xc]; if(xa==0||xb==0||xc==0) &#123; return 1; &#125; else if(xa&gt;20||xb&gt;20||xc&gt;20) &#123; return dfs(20,20,20); &#125; else if(xa&lt;xb&amp;&amp;xb&lt;xc) &#123; return dfs(xa,xb,xc-1)+dfs(xa,xb-1,xc-1)-dfs(xa,xb-1,xc); &#125; else &#123; return dfs(xa-1,xb,xc)+dfs(xa-1,xb-1,xc)+dfs(xa-1,xb,xc-1)-dfs(xa-1,xb-1,xc-1); &#125;&#125;int main() &#123; while(cin&gt;&gt;a&gt;&gt;b&gt;&gt;c) &#123; ans=0; memset(w,-1,sizeof w); if(a==-1&amp;&amp;b==-1&amp;&amp;c==-1)break; for(int i=0; i&lt;21; i++) &#123; for(int j=0; j&lt;21; j++) &#123; for(int k=0; k&lt;21; k++) &#123; w[i][j][k]=dfs(i,j,k); &#125; &#125; &#125; if(a&lt;=0||b&lt;=0||c&lt;=0) &#123; ans=1; &#125; else if(a&gt;20||b&gt;20||c&gt;20) &#123; ans=w[20][20][20]; &#125; else if(a&lt;b&amp;&amp;b&lt;c) &#123; ans=w[a][b][c-1]+w[a][b-1][c-1]-w[a][b-1][c]; &#125; else &#123; ans=w[a-1][b][c]+w[a-1][b-1][c]+w[a-1][b][c-1]-w[a-1][b-1][c-1]; &#125; printf("w(%d, %d, %d) = %d\n",a,b,c,ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>记忆化搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最少拦截系统优化]]></title>
    <url>%2Fundefined%2F%E6%9C%80%E5%B0%91%E6%8B%A6%E6%88%AA%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[HDU 1257 最少拦截系统 Problem Description某国为了防御敌国的导弹袭击,发展出一种导弹拦截系统.但是这种导弹拦截系统有一个缺陷:虽然它的第一发炮弹能够到达任意的高度,但是以后每一发炮弹都不能超过前一发的高度.某天,雷达捕捉到敌国的导弹来袭.由于该系统还在试用阶段,所以只有一套系统,因此有可能不能拦截所有的导弹.怎么办呢?多搞几套系统呗!你说说倒蛮容易,成本呢?成本是个大问题啊.所以俺就到这里来求救了,请帮助计算一下最少需要多少套拦截系统. Input输入若干组数据.每组数据包括:导弹总个数(正整数),导弹依此飞来的高度(雷达给出的高度数据是不大于30000的正整数,用空格分隔) Output对应每组数据输出拦截所有导弹最少要配备多少套这种导弹拦截系统. Sample Input8 389 207 155 300 299 170 158 65 Sample Output2 题目思路：只要不被误会成贪心，直接整就行。大概就是把每一个系统的存下来，遇到递减序列就过，碰到单的从第一个系统试，不行就加系统。唯一坑点是if判断不能放在子循环内，不然加不到。。。我就这样想了半天 12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;using namespace std;const int N=100007;int t,c,i,j;int a[N];int dp[N];int main() &#123; while(cin&gt;&gt;t) &#123; if(t==-1)break; memset(dp,0,sizeof dp); for(i=0; i&lt;t; i++) &#123; cin&gt;&gt;a[i]; &#125; dp[0]=a[0]; c=1; for(i=1; i&lt;t; i++) &#123; for(j=0; j&lt;c; j++) &#123; if(dp[j]&gt;=a[i]) &#123; dp[j]=a[i]; break; &#125; &#125; if(j&gt;=c) &#123; dp[j]=a[i]; c++; &#125; &#125; cout&lt;&lt;c&lt;&lt;endl; &#125; return 0;&#125; 也可以用最长上升子序列来做- 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;#define N 300005int dp[N],a[N];int main()&#123; int t,n; while(~scanf("%d",&amp;n))&#123; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; fill(dp,dp+n+1,1); for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;i;j++)&#123; if(a[j]&lt;a[i]) dp[i]=max(dp[j]+1,dp[i]); &#125; &#125; cout&lt;&lt;*max_element(dp,dp+n+1)&lt;&lt;endl; &#125; return 0;&#125; 上面这个是n*n的复杂度，二分+队列优化过是nlog（n）贴一个图解 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const int maxn = 100005;int sz[maxn],tp[maxn]; //int n=1;int p=1;int main()&#123; while(cin&gt;&gt;sz[n]) n++; tp[1] = sz[1]; for(int i=2;i&lt;n;i++)&#123; if(sz[i] &lt;= tp[p]) tp[++p] = sz[i];//注意&lt;= 最长不上升 else&#123; int l=1,r=p,mid=p&gt;&gt;1; while(l!=r)&#123; if(sz[i] &gt; tp[mid]) r = mid; else l = mid+1; mid = (l+r)&gt;&gt;1; &#125; tp[l] = sz[i]; &#125; &#125; cout&lt;&lt;p&lt;&lt;endl; memset(tp,0,sizeof(tp)); tp[1]=sz[1]; p=1; for(int i=2;i&lt;=n;i++)&#123; if(sz[i] &gt; tp[p]) tp[++p] = sz[i]; else&#123; int l=1,r=p,mid=p&gt;&gt;1; while(l!=r)&#123; if(sz[i] &lt;= tp[mid] ) r = mid; else l = mid+1; mid = (l+r)&gt;&gt;1; &#125; tp[l] = sz[i]; &#125; &#125; cout&lt;&lt;p&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01、多重、完全背包板子]]></title>
    <url>%2Fundefined%2F01%E3%80%81%E5%A4%9A%E9%87%8D%E3%80%81%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E6%9D%BF%E5%AD%90%2F</url>
    <content type="text"><![CDATA[【01背包】给你n种不同的物品，每个物品有自己的重量w[i]，和价值v[i]，如果每个物品只能拿一次，给你容量为m的背包，怎样才能取得最大价值？ 状态转移方程：dp[j]=MAX{dp[j],dp[j-w[i]]+v[i]} 基本操作： 123for(i=0;i&lt;n;i++) for(j=m;j&gt;=w[i];j--)//01是从最大到当前 dp[j]=max(dp[j],dp[j-w[i]]+v[i]); dp[j]用来记录当容量为j时的可行取法的最大价值。 【多重背包】给你n种不同的物品，每个物品有自己的重量w[i]，和价值v[i]，如果每个物品最多只能拿c[i]个，给你容量为m的背包，怎样才能取得最大价值？ 状态转移方程：dp[j]=MAX{dp[j],dp[j-kw[i]]+kv[i]};但是一般会T，所有要用二进制或者拆分01完全优化 二进制优化 123456789101112131415for(i=0;i&lt;n;i++) &#123; for(k=1;k&lt;&lt;1&lt;c[i];k&lt;&lt;=1) &#123; for(j=V;j&gt;=k*v[i];j--) &#123; dp[j]=max(dp[j],dp[j-k*v[i]]+k*w[i]); &#125; &#125; m=c[i]-k+1; for(j=V;j&gt;=m*v[i];j--) &#123; dp[j]=max(dp[j],dp[j-m*v[i]]+m*w[i]); &#125; &#125; coins那道题的板子，01拆分后二进制优化了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt; #include&lt;algorithm&gt;#include&lt;string.h&gt;#define INF 0x3f3f3f3fusing namespace std;//手表价格 int m; //单位货币的价值int val[1005];//单位货币的数量int vol[1005];int dp[100005];void Zero(int cost)&#123; for(int i=m;i&gt;=cost;i--) dp[i]=max(dp[i],dp[i-cost]+cost);&#125;//val*vol&gt;&gt;m，硬币可以无限使用，可以使用完全背包 void Com(int cost)&#123; for(int i=cost;i&lt;=m;i++) dp[i]=max(dp[i],dp[i-cost]+cost);&#125;//拆分vol,价格系数k*vol组成新硬币 void mul(int val,int vol)&#123; if(val*vol&gt;=m) Com(val); else&#123; int k=1; while(k&lt;=vol)&#123; Zero(k*val); vol-=k; k*=2; &#125; Zero(vol*val); &#125;&#125;int main()&#123; //货币的种类 int n; while(cin&gt;&gt;n&gt;&gt;m,(n||m))&#123; for(int i=1;i&lt;=n;i++) cin&gt;&gt;val[i]; for(int i=1;i&lt;=n;i++) cin&gt;&gt;vol[i]; memset(dp,0,sizeof(dp)); for(int i=0;i&lt;=m;i++) dp[i]=-INF; dp[0]=0; for(int i=1;i&lt;=n;i++) mul(val[i],vol[i]); int ans=0; for(int i=1;i&lt;=m;i++) if(dp[i]&gt;0) ans++; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 【完全背包】给你n种不同的物品，每个物品有自己的重量w[i]，和价值v[i]，一个物品可以拿多次，给你容量为m的背包，怎样才能取得最大价值？ 分析：类似于01背包问题，在01背包问题中，物品要么取，要么不取，而在完全背包中，物品可以取0件、取1件、取2件…直到背包放不下位置。因此，可以直接在01背包的递推式中扩展得到。 状态转移方程：dp[j]=MAX{dp[j],dp[j-w[i]]+v[i]} 基本操作： 123for(i=1;i&lt;=n;i++) for(j=w[i];j&lt;=m;j++) //注意此处与01背包不同，01为倒序 dp[j]=max(dp[j],dp[j-w[i]]+v[i]); 一个简单有效的优化 完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足c[i]&lt;=c[j]且w[i]&gt;=w[j]，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得j换成物美价廉的i，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[母函数详讲]]></title>
    <url>%2Fundefined%2F%E6%AF%8D%E5%87%BD%E6%95%B0%E8%AF%A6%E8%AE%B2%2F</url>
    <content type="text"><![CDATA[参考仪式黑刃和小飞_Xiaofei大佬们博客； 母函数，又称生成函数，是ACM竞赛中经常使用的一种解题算法，常用来解决组合方面的题目。 本文讲解母函数，但不讲解该算法的基础理论。读者随便找一本组合数学教材便可找到相应的内容，或者直接在网上搜索一下。 母函数通常解决类似如下的问题： 给5张1元，4张2元，3张5元，要得到15元，有多少种组合？ 某些时候会规定至少使用3张1元、1张2元、0张5元。 某些时候会规定有无数张1元、2元、5元。 还有比如投两个色子得到6得到为5. 解题过程解题时，首先要写出表达式，通常是多项的乘积，每项由多个x^y组成。如(1+x+x^2)(1+x^4+x^8)(x^5+x^10+x^15)。 通用表达式为 n2有时候是无限大。 之后就实现表达式相乘，从第一个因子开始乘，直到最后一个为止。此处通常使用一个循环，循环变量为i。每次迭代的计算结果放在数组a中。计算结束后，a[i]表示权重i的组合数，对应具体问题的组合数。 循环内部是把每个因子的每个项和a中的每个项相乘，加到一个临时的数组b的对应位（这里有两层循环，加上最外层循环，总共有三层循环），之后就把b赋给a。 通用模板12345678910111213//为计算结果，b为中间结果。int a[MAX],b[MAX];//初始化amemset(a,0,sizeof(a));a[0]=1;for (int i=1;i&lt;=17;i++)//循环每个因子&#123; memset(b,0,sizeof(b)); for (int j=n1[i];j&lt;=n2[i]&amp;&amp;j*v[i]&lt;=P;j++)//循环每个因子的每一项 for (int k=0;k+j*v[i]&lt;=P;k++)//循环a的每个项 b[k+j*v[i]]+=a[k];//把结果加到对应位 memcpy(a,b,sizeof(b));//b赋值给a&#125; P是可能的最大指数。拿钞票组合这题来说，如果要求15元有多少组合，那么P就是15；如果问最小的不能拼出的数值，那么P就是所有钱加起来的和。P有时可以直接省略。具体请看本文后面给出的例题。如果n2是无穷，那么第二层循环条件j&lt;=n2[i]可以去掉。 优化12345678910111213//初始化a，因为有last，所以这里无需初始化其他位a[0]=1;int last=0;for (int i=0;i&lt;K;i++)&#123; int last2=min(last+n[i]*v[i],P);//计算下一次的last memset(b,0,sizeof(int)*(last2+1));//只清空b[0..last2] for (int j=n1[i];j&lt;=n2[i]&amp;&amp;j*v[i]&lt;=last2;j++)//这里是last2 for (int k=0;k&lt;=last&amp;&amp;k+j*v[i]&lt;=last2;k++)//这里一个是last，一个是last2 b[k+j*v[i]]+=a[k]; memcpy(a,b,sizeof(int)*(last2+1));//b赋值给a，只赋值0..last2 last=last2;//更新last&#125; 下面看几个例题。 一、hdu 1085和hdu 1171两题套用了第二个模板，省略了代码中二三层循环里关于last2的条件（其实也可以加上）。 详见： hdu 1085：http://blog.csdn.net/xiaofei_it/article/details/17041467 hdu 1171：http://blog.csdn.net/xiaofei_it/article/details/17041709 二、hdu 1398套用了第一个模板，因为n2中每一项为无穷大，所以n2数组就省略了。 详见： hdu 1398：http://blog.csdn.net/xiaofei_it/article/details/17041815 三、hdu 2079、hdu 2082和hdu 2110三题直接套用了第二个模板。 详见： hdu 2079：http://blog.csdn.net/xiaofei_it/article/details/17042045 hdu 2082：http://blog.csdn.net/xiaofei_it/article/details/17042253 hdu 2110：http://blog.csdn.net/xiaofei_it/article/details/17042421 另外，至于什么时候用第一个模板，什么时候用第二个模板，就看题目规模。 通常情况下，第一个模板就够用了，上面的那些用第二个模板的题目用第一个模板同样能AC。 但如果数据规模比较大（通常不会有这种情况），就要使用第二个模板了。 以上题目n1均为0。 四、hdu 2152是一道n1不为0的题目，我在这里分别套用第一个和第二个模板解题。 详见： hdu 2152：http://blog.csdn.net/xiaofei_it/article/details/17042497 这些例题都可以在小飞大佬的博客中找到]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>母函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mongdb的安装以及用户的建立]]></title>
    <url>%2Fundefined%2FMongdb%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E7%9A%84%E5%BB%BA%E7%AB%8B%2F</url>
    <content type="text"><![CDATA[1.安装网址百度，密码： ctyy官网//我是从这里下的 2.安装过程一路Click Next然后 Click Install 等安装完成即可，下图安装路径，建议自定义一下，别安装在系统盘 3.安装完成后的配置 创建数据库文件的存放位置，比如f:/data/db。启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。 在管理员运行的cmd中，进入mongodb安装目录，并输入 mongod –dbpath f:/MongodB/data 备注：f:/MongodB2/data/db是数据库存放目录//之后建立用户那里有成功示例，可以先不弄，等建立用户再搞ps：这样进入。cd mo之后可以按TAB，自动补全。cd ..是进入上一层 4.配环境在环境变量中，配置mongodb的安装目录，比如我安装在F:\MongodB中，就在path中，添加F:\MongodB\bin 5.新建用户，这里示例是reanWrite的123456789&gt; use adminswitched to db admin&gt; db.createUser(... &#123;... user: "test",... pwd: "test",... roles: [ &#123; role: "readWrite", db: "admin" &#125; ]... &#125;... ) test数据库下，用户名和密码都是test的可读写用户更多详情请查看官方文档 6.登陆。首先，用管理员打开cmd我的data是在f盘的，所以dapath后面是这样。记得F:之前的空格运行成功如下不成功可以重新运行一下，记得退出时CTRL+C结束运行再退出。。。不然，，你可以试试 嘿嘿 登陆界面这里是重新开的cmd，普通打开，不用管理员运行成功如下，可以用 cls 清屏 用 test 的用户登陆test的数据库了，之后不用了的话CTRL+C退出，会出现bye 7.之后是常用指令显示这个库中所有表删除这个表，下一行返回true是成功删除，false是未成功]]></content>
      <categories>
        <category>配环境</category>
      </categories>
      <tags>
        <tag>MongDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HUD - 1398 入门DP/母函数]]></title>
    <url>%2Fundefined%2FHUD-1398-%E5%85%A5%E9%97%A8DP-%E6%AF%8D%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[母函数入门图解 题意：火星上的货币有1,4,9,16,25…..2^17这17中面值的硬币，问任意给定一个不大于300的正整数面额，用这些硬币来组成此面额总共有多少种组合种数。唔，我自己是用DP做的，但是题解给的是母函数，这里贴一下两种答案但是我觉得母函数做法时间复杂度太高了，dp打表快一点，，而且，，好像做法一样啊。。。。。。。。母函数 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#include&lt;algorithm&gt; using namespace std; int main()&#123; int n,i,j,k,c1[305],c2[305]; //第一次数组开300 WA了，， while(scanf("%d",&amp;n),n) &#123; for(i=0;i&lt;=n;i++)&#123; c1[i] = 1; //这里初始化应该是第一个括号表达式里 x次幂 的系数 c2[i] = 0; &#125; for(i=2;i*i&lt;=n;i++)&#123; //表达式个数，从第二个表达式开始计算 for(j=0;j&lt;=n;j++)&#123; for(k=0;j+k&lt;=n;k+=(i*i))&#123; c2[j+k] += c1[j]; &#125; &#125; for(j=0;j&lt;=n;j++)&#123; c1[j] = c2[j]; c2[j] = 0; &#125; &#125; printf("%d\n",c1[n]); &#125; return 0;&#125; DP 123456789101112131415161718#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;int money[]=&#123;1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289&#125;;int dp[320];int main()&#123; int n; while(~scanf("%d",&amp;n) &amp;&amp; n)&#123; memset(dp,0,sizeof(dp)); dp[0]=1; for(int i=0;i&lt;17;i++) for(int j=money[i];j&lt;=n;j++) dp[j]+=dp[j-money[i]]; printf("%d\n",dp[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>母函数</tag>
      </tags>
  </entry>
</search>
